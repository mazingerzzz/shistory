{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/python\n\n#\n# todo : change color for root\n# requirement : have a variable HISTTIMEFORMAT in your environment\n\nimport pwd\nimport os.path\nimport re\nimport datetime\n\n# key = user / value = homedir\nusers = {}\n# key = user / value = hist_path\nhist_pwd = {}\n\nhist_file = '/.bash_history'\n\n# [{unixtimestamp: [user, command]\nhist_vrac = []\n\n# timestamp list\nm_keys = []\n\nusers_blacklist = ['operator']\n\n\nclass bcolors:\n    HEADER = '\\033[95m'\n    BLUE = '\\033[94m'\n    GREEN = '\\033[92m'\n    YELLOW = '\\033[93m'\n    RED = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\n\ndef list_user_homedir():\n    for p in pwd.getpwall():\n        if p[6] == '/bin/bash' and p[0] not in users_blacklist:\n            users[p[0]] = p[5]\n\ndef find_history():\n    for k, v in users.iteritems():\n        if os.path.isfile(v + hist_file):\n            hist_pwd[k] = v + hist_file\n\n\ndef timestamp_chg(my_date):\n    t_stamp = (\n            datetime.datetime.fromtimestamp(\n                int(my_date)\n            ).strftime('%Y-%m-%d %H:%M:%S')\n    )\n    return t_stamp\n\n\ndef hist_sort():\n    for m_dict in hist_vrac:\n        for k, v in m_dict[0].iteritems():\n            m_keys.append(k)\n    return m_keys.sort()\n\n\ndef hist_agreg():\n    time_ok = False\n    i = 0\n    my_key = \"\"\n    for user, path in hist_pwd.iteritems():\n        try:\n            f = open(path, 'r')\n            for line in f:\n                if time_ok is True:\n                    # on affect dans la liste la command\n                    hist_vrac.append([{my_key: [user, line]}])\n                    i += 1\n                    time_ok = False\n                if re.search('^#10*[0-9]', line) and time_ok is False:\n                    # on ajoute la key du dict\n                    my_key = line.replace('#', '')\n                    my_key = my_key.replace('\\n', '')\n                    time_ok = True\n                else:\n                    pass\n            f.closed\n        except IOError:\n            pass\n\n\ndef left_space(c):\n    l_space_nbr = 0\n    len_c = 0\n    nbr_line = 0\n    nbr_line = len(str(len(m_keys)))\n    len_c = len(str(c))\n    if c == 1:\n        l_space_nbr = nbr_line - len_c + 1\n        return multi_space(l_space_nbr)\n        pass\n    l_space_nbr = nbr_line - len_c\n    return multi_space(l_space_nbr)\n\n\ndef right_space(user):\n    r_space_nbr = 0\n    r_space_nbr = max_len_user() - len(user)\n    return multi_space(r_space_nbr)\n\n\ndef max_len_user():\n    user = []\n    maxi = \"\"\n    user_maxi = []\n    for k, v in users.iteritems():\n        user.append([k])\n    user_maxi = max(user)\n    maxi = len(''.join(map(str, user_maxi)))\n    return maxi\n\n\ndef multi_space(space_nbr):\n    space = \"\"\n    for i in range(space_nbr):\n        space += \" \"\n    if space_nbr == 0:\n        space = \"\"\n    return space\n\n\ndef result():\n    c = 0\n    for i in m_keys:\n        for n in range(len(m_keys)):\n            # timestamp to string\n            current_key = hist_vrac[n][0].keys()\n            current_key = ''.join(map(str, current_key))\n            if current_key == i:\n                c += 1\n                current_user = hist_vrac[n][0][current_key][0]\n                current_cmd = hist_vrac[n][0][current_key][1]\n                print left_space(c),\n                print bcolors.BLUE + str(c) + bcolors.ENDC,\n                print bcolors.GREEN + right_space(current_user) + bcolors.ENDC,\n                print bcolors.GREEN + current_user + bcolors.ENDC,\n                print bcolors.YELLOW + timestamp_chg(current_key) + bcolors.ENDC,\n                print bcolors.GREEN + \">\" + bcolors.ENDC,\n                print bcolors.RED + current_cmd + bcolors.ENDC,\n                hist_vrac[n][0]['42'] = hist_vrac[n][0][current_key]\n\n\ndef main():\n    list_user_homedir()\n    find_history()\n    hist_agreg()\n    hist_sort()\n    result()\n\n\nif __name__ == \"__main__\":\n    main()\n",
			"settings":
			{
				"buffer_size": 3873,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 92.0,
		"last_filter": ":instal",
		"selected_items":
		[
			[
				":instal",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				":goto ",
				"Anaconda: Goto object definition"
			],
			[
				":goto",
				"Anaconda: Goto object definition"
			],
			[
				":py",
				"Set Syntax: Python"
			],
			[
				":git",
				"Set Syntax: Git Graph"
			],
			[
				"",
				":w - Save"
			],
			[
				":disp",
				"Anaconda: Display object docs"
			],
			[
				":displ",
				"Anaconda: Display object docs"
			],
			[
				":w",
				":w - Save"
			],
			[
				":set sy",
				"Preferences: Settings â€“ Syntax Specific"
			],
			[
				":x",
				"Set Syntax: XML"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/pkv/projets/shistory/None",
		"/home/pkv/projets/shistory/shistory.py",
		"/home/pkv/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/pkv/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/pkv/projets/shistory/shistory.sublime-project",
		"/home/pkv/ownCloud/carandboat/docs/controlm-draft.bak/install_controlm_init.yml",
		"/home/pkv/xrandr.sh",
		"/home/pkv/projets/find_aws/find_aws.py",
		"/home/pkv/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/pkv/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/pkv/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/pkv/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"date",
			"interpreter",
			"interpre",
			"func",
			"ignore",
			":\n",
			"\n    ",
			"Vint"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3873,
						"regions":
						{
						},
						"selection":
						[
							[
								1014,
								1014
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 774.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 166.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "shistory.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
